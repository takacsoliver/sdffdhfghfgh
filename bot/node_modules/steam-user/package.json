{
  "name": "steam-user",
  "version": "3.3.0",
  "description": "node-steam client handler for Individual and AnonUser Steam account types",
  "keywords": [
    "steam",
    "steam client",
    "steam user"
  ],
  "homepage": "https://github.com/DoctorMcKay/node-steam-user",
  "bugs": {
    "url": "https://github.com/DoctorMcKay/node-steam-user/issues"
  },
  "license": "MIT",
  "author": {
    "name": "Alexander Corn",
    "email": "mckay@doctormckay.com",
    "url": "https://www.doctormckay.com"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/DoctorMcKay/node-steam-user.git"
  },
  "dependencies": {
    "steamid": "^0.3.0",
    "appdirectory": "^0.1.0",
    "protobufjs": "^4.0.0",
    "steam-client": "^1.0.1",
    "bytebuffer": "^5.0.0",
    "steam-crypto": "^0.0.1",
    "vdf": "^0.0.2",
    "binarykvparser": "^2.0.0",
    "file-manager": "^1.0.0",
    "steam-totp": "^1.0.0"
  },
  "scripts": {
    "prepublish": "node scripts/prepublish.js"
  },
  "gitHead": "fe2e05d1d95c974a4ade277410d6c2956366471d",
  "_id": "steam-user@3.3.0",
  "_shasum": "a6d60588c9500cd9e198d871cc07f9533e9ed82f",
  "_from": "steam-user@",
  "_npmVersion": "3.3.0",
  "_nodeVersion": "5.1.1",
  "_npmUser": {
    "name": "doctormckay",
    "email": "mckay@doctormckay.com"
  },
  "dist": {
    "shasum": "a6d60588c9500cd9e198d871cc07f9533e9ed82f",
    "tarball": "http://registry.npmjs.org/steam-user/-/steam-user-3.3.0.tgz"
  },
  "maintainers": [
    {
      "name": "doctormckay",
      "email": "mckay@doctormckay.com"
    }
  ],
  "directories": {},
  "_resolved": "https://registry.npmjs.org/steam-user/-/steam-user-3.3.0.tgz",
  "readme": "# SteamUser\r\n### A handler module for node-steam v1.0.0 and greater\r\n[![npm version](https://img.shields.io/npm/v/steam-user.svg)](https://npmjs.com/package/steam-user)\r\n[![npm downloads](https://img.shields.io/npm/dm/steam-user.svg)](https://npmjs.com/package/steam-user)\r\n[![dependencies](https://img.shields.io/david/DoctorMcKay/node-steam-user.svg)](https://david-dm.org/DoctorMcKay/node-steam-user)\r\n[![license](https://img.shields.io/npm/l/steam-user.svg)](https://github.com/DoctorMcKay/node-steam-user/blob/master/LICENSE)\r\n[![paypal](https://img.shields.io/badge/paypal-donate-yellow.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=N36YVAT42CZ4G&item_name=node%2dsteam%2duser&currency_code=USD)\r\n\r\nSteamUser is a handler module for [node-steam](https://github.com/seishun/node-steam) version 1.0.0 or greater.\r\nIt also works with [node-steam-client](https://github.com/DoctorMcKay/node-steam-client).\r\n\r\nIt's designed to be a self-contained module which provides all the functionality expected of a Steam user client.\r\n\r\n[Subscribe to release announcements](https://github.com/DoctorMcKay/node-steam-user/releases.atom)\r\n\r\n# Static Properties\r\n\r\nStatic properties, or properties attached directly to `SteamUser`, are accessed on the root module and not on instantiated handler instances.\r\n\r\n### Steam\r\n\r\nThe `node-steam-client` module installation used by `SteamUser`. You can use this in place of `require('steam-client')`\r\nif you'd like to avoid duplicate installations.\r\n\r\nExample of using `EResult`:\r\n\r\n```js\r\nvar SteamUser = require('steam-user');\r\nvar ok = SteamUser.Steam.EResult.OK;\r\n```\r\n\r\n### ECurrencyCode\r\n\r\nAn up-to-date enum of Steam's many currencies. [View here](https://github.com/DoctorMcKay/node-steam-user/blob/bde87d94bcafd870bd460694d036d1c88121da87/components/utility.js#L3-L37)\r\n\r\nExample:\r\n\r\n```js\r\nvar SteamUser = require('steam-user');\r\nvar usd = SteamUser.ECurrencyCode.USD;\r\n```\r\n\r\n# Static Methods\r\n\r\nStatic methods, or functions attached directly to `SteamUser`, are called on the root module and not on instantiated handler instances.\r\n\r\n### formatCurrency(amount, currency)\r\n- `amount` - The amount of the currency\r\n- `currency` - The currency code value in the [`ECurrencyCode`](#ecurrencycode) enum\r\n\r\nFormats a currency value and returns a string. For example:\r\n\r\n```js\r\nconsole.log(SteamUser.formatCurrency(12.34, SteamUser.ECurrencyCode.USD)); // $12.34\r\nconsole.log(SteamUser.formatCurrency(12345, SteamUser.ECurrencyCode.JPY)); // � 12345\r\nconsole.log(SteamUser.formatCurrency(123.45, SteamUser.ECurrencyCode.EUR)); // 123,45�\r\n```\r\n\r\n### generateAuthCode(secret[, timeOffset])\r\n- `secret` - A `Buffer`, hex string, or base64 string containing your shared secret\r\n- `timeOffset` - The number of seconds by which your local clock is off from the Steam servers. Defaults to 0.\r\n\r\nGenerates a 5-digit alphanumeric Steam Guard code for use with two-factor mobile authentication.\r\n\r\n**Deprecated. Use [`steam-totp`](https://www.npmjs.com/package/steam-totp) instead.**\r\n\r\n# Options\r\n\r\nThere are a number of options which can control the behavior of the `SteamUser` object. They are:\r\n\r\n### dataDirectory\r\n\r\nControls where the Steam server list and sentry files are written. If `null`, no data will be automatically stored.\r\n\r\nDefaults to a platform-specific user data directory.\r\n\r\n- On [OpenShift](https://www.openshift.com), this is `$OPENSHIFT_DATA_DIR/node-steamuser`\r\n- On Windows, this is `%localappdata%\\doctormckay\\node-steamuser`\r\n- On Mac, this is `~/Library/Application Support/node-steamuser`\r\n- On Linux, this is `$XDG_DATA_HOME/node-steamuser`, or `~/.local/share/node-steamuser` if `$XDG_DATA_HOME` isn't defined or is empty\r\n\r\n#### Custom Storage Engine\r\n\r\nIf you don't want to (or can't) save data to the disk, you can implement your own storage engine. To do this, simply add the following code:\r\n\r\n```js\r\nuser.storage.on('save', function(filename, contents, callback) {\r\n\t// filename is the name of the file, as a string\r\n\t// contents is a Buffer containing the file's contents\r\n\t// callback is a function which you MUST call on completion or error, with a single error argument\r\n\r\n\t// For example:\r\n\tsomeStorageSystem.saveFile(filename, contents, function(err) {\r\n\t\tcallback(err);\r\n\t});\r\n});\r\n\r\nuser.storage.on('read', function(filename, callback) {\r\n\t// filename is the name of the file, as a string\r\n\t// callback is a function which you MUST call on completion or error, with an error argument and a Buffer argument\r\n\r\n\t// For example:\r\n\tsomeStorageSystem.readFile(filename, function(err, file) {\r\n\t\tif(err) {\r\n\t\t\tcallback(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tcallback(null, file);\r\n\t});\r\n});\r\n```\r\n\r\nIn this manner, you can save data to a database, a cloud service, or anything else you choose.\r\n\r\n### autoRelogin\r\n\r\nA boolean which controls whether or not `SteamUser` will automatically reconnect to Steam if disconnected due to Steam going down.\r\n\r\nDefaults to `true`.\r\n\r\n### singleSentryfile\r\n\r\nA boolean which controls whether or not `SteamUser` will use a single sentry file for all accounts.\r\n\r\nIf off, a file named `sentry.accountname.bin` will be saved for each account.\r\nIf on, a file named `sentry.bin` will be used for all accounts.\r\n\r\nDefaults to `false`.\r\n\r\n### promptSteamGuardCode\r\n\r\nA boolean which controls whether or not `SteamUser` will automatically prompt for Steam Guard codes when necessary from `stdin`.\r\n\r\nDefaults to `true`.\r\n\r\n### machineIdType\r\n\r\nWhat kind of machine ID will SteamUser send to Steam when logging on? Should be a value from [`EMachineIDType`](https://github.com/DoctorMcKay/node-steam-user/blob/master/resources/EMachineIDType.js).\r\n\r\nAdded in 1.7.0.\r\n\r\nDefaults to `AccountNameGenerated`.\r\n\r\n### machineIdFormat\r\n\r\nIf you're using `machineIdType` `AccountGenerated`, this is the format it uses. This is an array of three strings, each of which will be hashed with SHA1 before being sent to Steam. `{account_name}` will be replaced with the current account name.\r\n\r\nAdded in 1.13.0.\r\n\r\nDefaults to `[\"SteamUser Hash BB3 {account_name}\", \"SteamUser Hash FF2 {account_name}\", \"SteamUser Hash 3B3 {account_name}\"]`.\r\n\r\n### enablePicsCache\r\n\r\nIf enabled, then `node-steam-user` will internally cache data about all apps and packages that it knows about.\r\nCurrently, `node-steam-user` \"knows about\" an app/package if:\r\n\r\n- Packages\r\n    - You own it\r\n    - You request info about it via `getProductInfo`\r\n- Apps\r\n    - It's in a known package\r\n    - You request info about it via `getProductInfo`\r\n    - A friend who is online plays the app\r\n    - You request info about an online user who is playing it via `getPersonas`\r\n\r\nThis option is required in order to use several methods and events. This works when logging in anonymously.\r\n\r\nAdded in 3.3.0.\r\n\r\nDefaults to `false`.\r\n\r\n### picsCacheAll\r\n\r\nIf enabled, `enablePicsCache` is enabled, and `changelistUpdateInterval` is nonzero, then apps and packages which get\r\nupdated while your bot is running will also be added to the cache. Default behavior is to only cache apps and packages\r\nthat are \"known\" via the above criteria.\r\n\r\nAdded in 3.3.0.\r\n\r\nDefaults to `false`.\r\n\r\n### changelistUpdateInterval\r\n\r\nIf `enablePicsCache` is enabled, then `node-steam-user` will automatically request app/package changes (via\r\n`getProductChanges`) for known apps and packages, and update the internal cache when they update. Set to `0` to disable.\r\n\r\nAdded in 3.3.0.\r\n\r\nDefaults to `60000`.\r\n\r\n# Properties\r\n\r\n### client\r\n\r\nThe `SteamClient` which is being used to communicate with Steam.\r\n\r\n### steamID\r\n\r\n`null` if not connected, a [`SteamID`](https://www.npmjs.com/package/steamid) containing your SteamID otherwise.\r\n\r\n### options\r\n\r\nAn object containing options for this `SteamUser`. **Read-only**, use `setOption` or `setOptions` to change an option.\r\n\r\n### publicIP\r\n\r\n**v1.12.0 or later is required to use this property**\r\n\r\nOnly defined if you're currently logged on. This is your public IP as reported by Steam, in \"x.x.x.x\" format.\r\n\r\n### cellID\r\n\r\n**v1.12.0 or later is required to use this property**\r\n\r\nOnly defined if you're currently logged on. This is you cell (region ID) on the Steam network.\r\n\r\n### emailInfo\r\n\r\nAn object containing information about your account's email address. `null` until [`emailInfo`](#emailinfo-1) is emitted.\r\n\r\n- `address` - Your email address\r\n- `validated` - `true` if your email is validated, `false` if not\r\n\r\n### limitations\r\n\r\nAn object containing information about your account's limitations. `null` until [`accountLimitations`](#accountlimitations) is emitted.\r\n\r\n- `limited` - `true` if your account is [limited](https://support.steampowered.com/kb_article.php?ref=3330-IAGK-7663), `false` if not\r\n- `communityBanned` - `true` if your account is banned from Steam Community, `false` if not\r\n- `locked` - `true` if your account is [locked](https://support.steampowered.com/kb_article.php?ref=6416-FHVM-3982), `false` if not (accounts can also be locked by Support)\r\n- `canInviteFriends` - `true` if your account can invite friends, `false` if not\r\n\r\n### vac\r\n\r\nAn object containing information about your account's VAC bans. `null` until [`vacBans`](#vacbans) is emitted.\r\n\r\n- `numBans` - How many bans are registered on your account\r\n- `appids` - An array of AppIDs from which you're banned. Since each ban affects a range of AppIDs, some of the AppIDs in this array may not exist.\r\n\r\n### wallet\r\n\r\nAn object containing information about your Steam Wallet. `null` until [`wallet`](#wallet-1) is emitted.\r\n\r\n- `hasWallet` - `true` if your account has a Steam Wallet, `false` if not\r\n- `currency` - The currency ID of your account's wallet (the enum of currencies is available as `SteamUser.ECurrencyCode`)\r\n- `balance` - Your account's current wallet balance\r\n\r\n### licenses\r\n\r\nAn array containing license data for the packages which your Steam account owns. `null` until [`licenses`](#licenses-1) is emitted.\r\n\r\n### users\r\n\r\nAn object containing persona data about all Steam users we've encountered or requested data for. Key are 64-bit SteamIDs, values are identical to the objects received in the [`user`](#user) event.\r\n\r\n### groups\r\n\r\nAn object containing information about all Steam groups we've encountered. Keys are 64-bit SteamIDs, values are identical to those received in the [`group`](#group) event.\r\n\r\n### chats\r\n\r\nAn object containing information about all chat rooms we're in. Keys are 64-bit SteamIDs, values are objects with this structure:\r\n- `name` - The name of the chat, or empty if it's a multi-user chat\r\n- `private` - `true` if only group members can join, `false` if it's open to everyone\r\n- `invisibleToFriends` - `true` if the chat is invisible to friends, `false` if visible (unsure what this means at this time)\r\n- `officersOnlyChat` - `true` if only group officers can chat right now, `false` if everyone can\r\n- `unjoinable` - `true` if the chat can't be joined, `false` if it can (note that this doesn't necessary mean **your** effective access)\r\n- `members` - An object whose keys are 64-bit SteamIDs of users in this chat room, and whose values are objects with this structure:\r\n\t- `rank` - A value from `EClanRank`\r\n\t- `permissions` - A bitstring of values in `EChatPermission` for the user's permissions in this chat\r\n\r\n### myFriends\r\n\r\nAn object whose keys are 64-bit SteamIDs, and whose values are values from the `EFriendRelationship` enum. Therefore, you can deduce your friends list from this object.\r\n\r\nWhen we get unfriended, instead of setting the value to `EFriendRelationship.None`, the key is deleted from the object entirely.\r\n\r\n### myGroups\r\n\r\nAn object whose keys are 64-bit SteamIDs, and whose values are from the `EFriendRelationship` enum. Therefore, you can deduce which groups you're in from this object.\r\n\r\nWhen we leave a group, instead of setting the value to `EFriendRelationship.None`, the key is deleted from the object entirely.\r\n\r\n### myFriendGroups\r\n\r\n**v1.10.0 or later is required to use this property**\r\n\r\nAn object containing your friend groups (in the official client, these are called *tags*). Keys are numeric group IDs, and objects as follows:\r\n- `name` - A `string` containing the name of the group.\r\n- `members` - An array containing `SteamID` objects for the members of this friend group.\r\n\r\n### picsCache\r\n\r\n**v3.3.0 or later is required to use this property**\r\n\r\nAn object containing cached data about known apps and packages. Only useful if the `enablePicsCache` option is `true`.\r\n- `changenumber` - The last known changenumber\r\n- `apps` - An object whose keys are AppIDs and values are objects identical to those returned by `getProductInfo`\r\n- `packages` - An object whose keys are PackageIDs and values are objects identical to those returned by `getProductInfo`\r\n\r\n# Methods\r\n\r\n### Constructor([client][, options])\r\n- `client` - An optional `SteamClient` to use to connect to Steam. If not provided, one will be created automatically.\r\n- `options` - An optional object containing zero or more [options](#options) to set for this `SteamUser`.\r\n\r\nConstructs a new `SteamUser`. If you allow `SteamUser` to create its own `SteamClient`, then `SteamUser` will automatically save and reload the CM server list.\r\n\r\n### setOption(option, value)\r\n- `option` - The name of the option to set\r\n- `value` - The value to set for this option\r\n\r\nChanges the value of an [option](#options).\r\n\r\n### setOptions(options)\r\n- `options` - An object containing zero or more [options](#options).\r\n\r\n### setSentry(sentry)\r\n- `sentry` - A Buffer containing the binary sentry file, binary SHA1 hash, or `null` to unset the set sentry\r\n\r\nIf you aren't using `dataDirectory` or you just want to provide your own sentry file, you can do it using this method.\r\n\r\nYou should call this before calling `logOn`. When you log on, `SteamUser` will use this sentry file.\r\n\r\nYou can provide either an entire sentryfile (preferred), or a Buffer containing the binary SHA1 hash of your sentryfile (e.g. the output of the `sentry` event in node-steam 0.6.x).\r\n\r\n### logOn([details])\r\n- `details` - An object containing details for this logon\r\n\t- `accountName` - If logging into a user account, the account's name\r\n\t- `password` - If logging into an account without a login key, the account's password\r\n\t- `authCode` - If you have a Steam Guard email code, you can provide it here. You might not need to, see the [`steamGuard`](#steamguard) event. (Added in 1.9.0)\r\n\t- `twoFactorCode` - If you have a Steam Guard mobile two-factor authentication code, you can provide it here. You might not need to, see the [`steamGuard`](#steamguard) event. (Added in 1.9.0)\r\n\t- `loginKey` - If logging into an account with a login key, this is the account's login key\r\n\t- `rememberPassword` - `true` if you want to get a login key which can be used in lieu of a password for subsequent logins. `false` or omitted otherwise.\r\n\t- `logonID` - A number to identify this login. The official Steam client derives this from your machine's private IP (it's the `obfustucated_private_ip` field in `CMsgClientLogOn`). If you try to logon twice to the same account from the same public IP with the same `logonID`, the first session will be kicked with reason `Steam.EResult.LogonSessionReplaced`. Defaults to `0` if not specified.\r\n\r\nLogs onto Steam. The `SteamClient` should **not** be connected. Omit the `details` object if you wish to login to an anonymous user account.\r\n\r\n### logOff()\r\n\r\nLogs you off of Steam and closes the connection.\r\n\r\n### webLogOn()\r\n\r\n`SteamUser` will automatically log onto steamcommunity.com when a successful connection to Steam is established (as an individual user), but you can call `webLogOn()` to create a new session if your old one expires or becomes invalid.\r\n\r\nListen for the [`webSession`](#websession) event to get your cookies.\r\n\r\n### createAccount(accountName, password, email, callback)\r\n- `accountName` - The username of your new account\r\n- `password` - The password for your new account\r\n- `email` - The contact email for your new account\r\n- `callback` - Called when the account is either created or an error occurs\r\n\t- `result` - A value from `Steam.EResult`.\r\n\t\t- `Steam.EResult.OK` if the account was created successfully\r\n\t\t- `Steam.EResult.DuplicateName` if there is already an account with that username\r\n\t\t- `Steam.EResult.IllegalPassword` if your password is too weak or otherwise bad\r\n\t\t- or something else on another error\r\n\t- `steamid` - If successful, this is a `SteamID` object containing the new account's SteamID\r\n\r\nCreates a new individual user Steam account. You must be logged on either anonymously or as an existing individual user to use this.\r\n\r\n### requestValidationEmail([callback])\r\n- `callback` - Optional. Called when a response is available\r\n\t- `result` - A value from `Steam.EResult`. `Steam.EResult.OK` if the mail was sent successfully.\r\n\r\nRequests Steam to send you a validation email to your registered email address.\r\n\r\n### enableTwoFactor(callback)\r\n- `callback` - Required. Called when the activation email has been sent.\r\n\t- `response` - An object containing the response data\r\n\r\n**v2.0.0 or later is required to use this method**\r\n\r\nStarts the process to turn on TOTP for your account. You must have a phone number already linked with and verified on your account.\r\n\r\nYou'll be sent an SMS with an activation code that you'll need to provide to `finalizeTwoFactor`.\r\n\r\n**You should save the entire `response` object somewhere secure.** You can use `JSON.stringify` on it safely.\r\n\r\nProperties of note in the `response` object:\r\n- `status` - A value from `EResult`. If this is not `OK` (1), then the request failed.\r\n- `shared_secret` - This is your secret that's used for two-factor authentication.\r\n- `revocation_code` - You will need this in the future to disable two-factor authentication.\r\n\r\n### finalizeTwoFactor(secret, activationCode, callback)\r\n- `secret` - A `Buffer` containing your shared secret\r\n- `activationCode` - A `string` containing the activation code you got in your SMS\r\n- `callback` - Required.\r\n\t- `err` - An `Error` object on failure, or `null` on success\r\n\r\n**v2.0.0 or later is required to use this method**\r\n\r\nFinishes the process of enabling TOTP two-factor authentication for your account. You can use [`steam-totp`](https://www.npmjs.com/package/steam-totp) in the future when logging on to get a code.\r\n\r\n**If TOTP two-factor authentication is enabled, a code will be required *on every login* unless a `loginKey` is used.**\r\n\r\n### disableTwoFactor(options, callback)\r\n\r\n#### This method no longer works. Attempts to call it will result in an Error being thrown. [Use node-steamcommunity instead.](https://mckay.media/UnsG7)\r\n\r\n### getSteamGuardDetails(callback)\r\n- `callback` - A function to be called when the requested data is available\r\n\t- `enabled` - `true` if Steam Guard is enabled for your account, `false` if not\r\n\t- `enabledTime` - A `Date` object representing when Steam Guard was enabled for your account, or `null` if not available\r\n\t- `machineTime` - A `Date` object representing when your current machine was authorized with Steam Guard, or `null` if not available\r\n\t- `canTrade` - `true` if Steam Guard will allow you to trade, `false` if not. You may still be blocked by a trade ban or another trading limitation.\r\n\r\n**v1.11.0 or later is required to use this method. v1.12.0 or later is required to use `canTrade`.**\r\n\r\nRequests details about your account's Steam Guard status. This could be used to see if your account passes the Steam Guard trading requirements.\r\n\r\nIn order to trade, both of the following must be true:\r\n- `enabledTime` must be at least 15 days ago (account-level restriction)\r\n- `machineTime` must be at least 7 days ago (sentryfile-level restriction)\r\n\r\n### gamesPlayed(apps)\r\n`apps` - An array, object, string, or number (see below)\r\n\r\nReports to Steam that you're playing or using zero or more games/apps. To exit all games/apps, use an empty array `[]`.\r\n\r\nTo play a single game by AppID, use a single integer (e.g. `440`)\r\n\r\nTo play a single non-Steam game by name, use a single string (e.g. `\"Minecraft\"`)\r\n\r\nTo play a single game by AppID and name (the client-provided name is what is given to the WebAPI and mobile app), use an object of this format:\r\n\r\n```js\r\n{\r\n\t\"game_id\": 440,\r\n\t\"game_extra_info\": \"Team Fortress 2\"\r\n}\r\n```\r\n\r\nYou can use multiple apps by providing an array of any mixture of the above formats.\r\n\r\n### getPlayerCount(appid, callback)\r\n- `appid` - The AppID of the app for which you'd like the current player/user count (use `0` to get current logged-in Steam user count)\r\n- `callback` - Called when the requested data is available\r\n\t- `result` - A value from `Steam.EResult`\r\n\t- `players` - How many Steam users are currently playing/using the app\r\n\r\nRequests a count of how many Steam users are currently playing/using an app.\r\n\r\n### serverQuery(conditions, callback)\r\n- `conditions` - A [filter string](https://developer.valvesoftware.com/wiki/Master_Server_Query_Protocol#Filter) or an object containing one or more of the following properties:\r\n\t- `app_id` - The AppID of the game for which you want servers\r\n\t- `geo_location_ip` - The IP address of the querying client, used for geolocation (in `x.x.x.x` format)\r\n\t- `region_code` - The [region code](https://developer.valvesoftware.com/wiki/Master_Server_Query_Protocol#Region_codes) where you want servers\r\n\t- `filter_text` - A [filter string](https://developer.valvesoftware.com/wiki/Master_Server_Query_Protocol#Filter)\r\n\t- `max_servers` - Maximum number of servers to return in this response (default and hard limit 5000)\r\n- `callback` - Called when the response is available\r\n\t- `err` - If an error occurred, this is an `Error` object. Otherwise, it's `null`.\r\n\t- `servers` - An array of objects containing server data\r\n\t\t- `ip` - The server's IP in `x.x.x.x` format\r\n\t\t- `port` - The server's game port\r\n\t\t- `players` - How many authenticated players are on this server (the Steam server browser will use this value if the gameserver itself reports more players and doesn't report itself as full, to prevent inflated player counts)\r\n\r\nRequests a list of game servers from the master server.\r\n\r\n### getServerList(filter, limit, callback)\r\n- `filter` - A master server [filter string](https://developer.valvesoftware.com/wiki/Master_Server_Query_Protocol#Filter)\r\n- `limit` - How many servers should be returned, at maximum. Hard limit is 5000.\r\n- `callback` - Called when the requested data is available\r\n\t- `servers` - An array of objects containing server data\r\n\t\t- `addr` - The server's IP address in `x.x.x.x:p` format\r\n\t\t- `gameport` - The port the server is running on for game clients\r\n\t\t- `specport` - The port the server is running on for spectator clients (`null` for none)\r\n\t\t- `steamid` - A [`SteamID`](https://www.npmjs.com/package/steamid) object containing the server's SteamID\r\n\t\t- `name` - The server's hostname\r\n\t\t- `appid` - The AppID of the game which the server is serving\r\n\t\t- `gamedir` - The directory of the game which the server is serving\r\n\t\t- `version` - The version of the game which the server is serving\r\n\t\t- `product` - The product name of the game which the server is serving\r\n\t\t- `region` - The [region code](https://developer.valvesoftware.com/wiki/Master_Server_Query_Protocol#Region_codes) for where the server is located\r\n\t\t- `players` - How many people are currently on this server\r\n\t\t- `max_players` - How many people can be on the server at once\r\n\t\t- `bots` - How many CPU players are currently on this server\r\n\t\t- `map` - The name of the map which the server is currently running\r\n\t\t- `secure` - `true` if the server is VAC-secure, `false` if not\r\n\t\t- `dedicated` - `true` if the server is dedicated, `false` if listen\r\n\t\t- `os` - `w` if the server is running on Windows, `l` for Linux\r\n\t\t- `gametype` - The server's tags, separated by commas\r\n\r\n**Works when anonymous.** Requests a list gameservers from Steam matching a given filter, along with information about the server as Steam knows it.\r\n\r\n### getServerSteamIDsByIP(ips, callback)\r\n- `ips` - An array of IP addresses, in `x.x.x.x:p` format\r\n- `callback` - Called when requested data is available\r\n\t- `servers` - An object whose keys are IP addresses in `x.x.x.x:p` format and values are [`SteamID`](https://www.npmjs.com/package/steamid) objects\r\n\r\n**Works when anonymous.** Gets current SteamIDs for servers running on given addresses.\r\n\r\n### getServerIPsBySteamID(steamids, callback)\r\n- `steamids` - An array of [`SteamID`](https://www.npmjs.com/package/steamid) objects, or something which can parse into one (64-bit SteamID as string, Steam3 rendered format)\r\n- `callback` - Called when requested data is available\r\n\t- `servers` - An object whose keys are 64-bit numeric SteamIDs and values are IP addresses in `x.x.x.x:p` format\r\n\r\n**Works when anonymous.** Gets current IP addresses for servers with given SteamIDs.\r\n\r\n### getProductChanges(sinceChangenumber, callback)\r\n- `sinceChangenumber` - The changenumber of the last known changelist. You will get changes which have occurred since then and now. Use 1 to request all changes ever.\r\n- `callback` - Called when data is available\r\n\t- `currentChangenumber` - The changenumber of the newest changelist\r\n\t- `apps` - An array of objects for apps which have changed. Each object has these properties:\r\n\t\t- `appid` - The AppID of the app\r\n\t\t- `change_number` - The changenumber of the latest changelist in which the app has changed\r\n\t\t- `needs_token` - `true` if you need an access token to get most details about this app, `null` if not\r\n\t- `packages` - An array of objects for packages which have changed. Each object has the same properties as the `apps` array, except `appid` is `packageid`.\r\n\r\n**Works when anonymous.** Requests a list of all apps/packages which have changed since a given changenumber.\r\n\r\n### getProductInfo(apps, packages, callback)\r\n- `apps` - Either an array of AppIDs, or an array of objects containing `appid` and `access_token` properties\r\n- `packages` - Either an array of PackageIDs, or an array of objects containing `packageid` and `access_token` properties\r\n- `callback` - Called when requested data is available\r\n\t- `apps` - An object whose keys are AppIDs and whose values are objects\r\n\t\t- `changenumber` - The changenumber of the latest changelist in which this app changed\r\n\t\t- `missingToken` - `true` if you need to provide an access token to get more details about this app\r\n\t\t- `appinfo` - An object whose structure is identical to the output of `app_info_print` in the [Steam console](steam://nav/console)\r\n\t- `packages` - An object whose keys are PackageIDs and whose values are objects. Each object has the same properties as the `apps` array, except `appinfo` is `packageinfo`.\r\n\t- `unknownApps` - An array of input AppIDs which don't exist\r\n\t- `unknownPackages` - An array of input PackageIDs which don't exist\r\n\r\n**Works when anonymous.** Requests details about one or more apps or packages.\r\n\r\n### getProductAccessToken(apps, packages, callback)\r\n- `apps` - An array of AppIDs\r\n- `packages` - An array of PackageIDs\r\n- `callback` - Called when requested data is available\r\n\t- `apps` - An object whose keys are AppIDs and whose values are access tokens\r\n\t- `packages` - An object whose keys are PackageIDs and whose values are access tokens\r\n\t- `appDeniedTokens` - An array of AppIDs for which Steam denied you an access token\r\n\t- `packageDeniedTokens` - An array of PackageIDs for which Steam denied you an access token\r\n\r\n**Works when anonymous.** Requests access tokens for one or more apps or packages. These access tokens can be used with [`getProductInfo`](#productinfoapps-packages-callback).\r\n\r\nAccess tokens are global. That is, everyone who has access to an app receives the same token. Tokens do not seem to expire.\r\n\r\n### getOwnedApps()\r\n\r\n**v3.3.0 or later is required to use this method**\r\n\r\nReturns an array of AppIDs which your account owns. This cannot be safely called until `appOwnershipCached` is emitted.\r\n\r\n`enablePicsCache` must be `true` to use this method. Otherwise, an `Error` will be thrown.\r\n\r\n### ownsApp(appid)\r\n- `appid` - A numeric AppID\r\n\r\n**v3.3.0 or later is required to use this method**\r\n\r\nReturns `true` if your account owns the specified AppID, or `false` if not. This cannot be safely called until\r\n`appOwnershipCached` is emitted.\r\n\r\n`enablePicsCache` must be `true` to use this method. Otherwise, an `Error` will be thrown.\r\n\r\n### getOwnedDepots()\r\n\r\n**v3.3.0 or later is required to use this method**\r\n\r\nReturns an array of depot IDs which your account owns. This cannot be safely called until `appOwnershipCached` is emitted.\r\n\r\n`enablePicsCache` must be `true` to use this method. Otherwise, an `Error` will be thrown.\r\n\r\n### ownsDepot(depotid)\r\n- `depotid` - A numeric depot ID\r\n\r\n**v3.3.0 or later is required to use this method**\r\n\r\nReturns `true` if your account owns the specified depot, or `false` if not. This cannot be safely called until\r\n`appOwnershipCached` is emitted.\r\n\r\n`enablePicsCache` must be `true` to use this method. Otherwise, an `Error` will be thrown.\r\n\r\n### getOwnedPackages()\r\n\r\n**v3.3.0 or later is required to use this method**\r\n\r\nReturns an array of package IDs which your account owns. If you logged in anonymously, this can be safely called\r\nimmediately following logon. Otherwise, this cannot be safely called until `licenses` is emitted.\r\n\r\n### ownsPackage(packageid)\r\n- `packageid` - A numeric package ID\r\n\r\n**v3.3.0 or later is required to use this method**\r\n\r\nReturns `true` if your account owns the specified package ID, or `false` if not. If you logged in anonymously, this can\r\nbe safely called immediately following logon. Otherwise, this cannot be safely called until `licenses` is emitted.\r\n\r\n### setPersona(state[, name])\r\n- `state` - A value from `EPersonaState`\r\n- `name` - Optional. Your new profile name\r\n\r\n**v1.9.0 or later is required to use this method**\r\n\r\nChanges our online status, and optionally your profile name. You need to call this after you logon or else you'll show up as offline.\r\n\r\n### addFriend(steamID)\r\n- `steamID` - The SteamID of the user you want to add as a friend, as a `SteamID` object or a string that can parse into one\r\n\r\n**v1.9.0 or later is required to use this method**\r\n\r\nSends a friend request to the user with the specified `SteamID`. If they've already sent you a friend request, accepts it.\r\n\r\n### removeFriend(steamID)\r\n- `steamID` - The SteamID of the user you want to remove from your friends list, as a `SteamID` object or a string that can parse into one\r\n\r\n**v1.9.0 or later is required to use this method**\r\n\r\nRemoved a specified user from your friends list. Also ignores an outstanding friend request from this user.\r\n\r\n### blockUser(steamID[, callback])\r\n- `steamID` - The SteamID of the user you want to block, as a `SteamID` object or a string that can parse into one\r\n- `callback` - Optional. Called when the request completes\r\n\t- `eresult` - A value from the `EResult` enum\r\n\r\n**v1.9.0 or later is required to use this method**\r\n\r\nBlocks all communication with a specified user.\r\n\r\n### unblockUser(steamID[, callback])\r\n- `steamID` - The SteamID of the user you want to unblock, as a `SteamID` object or a string that can parse into one\r\n- `callback` - Optional. Called when the request completes\r\n\t- `eresult` - A value from the `EResult` enum\r\n\r\n**v1.9.0 or later is required to use this method**\r\n\r\nUnblocks all communication with a specified user.\r\n\r\n### getPersonas(steamids[, callback])\r\n- `steamids` - An array of `SteamID` objects or strings which can parse into `SteamID` objects\r\n- `callback` - Optional. Called when the requested data is available.\r\n\t- `personas` - An object whose keys are 64-bit SteamIDs and whose values are objects identical to those received in the [`user`](#user) event\r\n\r\n**v1.9.0 or later is required to use this method**\r\n\r\nRequests persona data for one or more users from Steam. The response will arrive in the [`user`](#user) event, or in the callback if provided.\r\n\r\n### getSteamLevels(steamids, callback)\r\n- `steamids` - An array of `SteamID` objects or strings that can parse into `SteamID` objects\r\n- `callback` - Called when the requested data is available.\r\n\t- `results` - An object whose keys are 64-bit SteamIDs (as strings) and whose values are Steam levels\r\n\r\n**v1.9.0 or later is required to use this method**\r\n\r\nGets the Steam Level for one or more Steam users (who do not have to be on your friends list).\r\n\r\n### trade(steamID)\r\n- `steamID` - Either a `SteamID` object or a string which can parse into one\r\n\r\n**v1.9.0 or later is required to use this method**\r\n\r\nSend a trade request to the specified user. Listen for the [`tradeResponse`](#traderesponse) event for their response.\r\n\r\n### cancelTradeRequest(steamID)\r\n- `steamID` - Either a `SteamID` object or a string which can parse into one\r\n\r\n**v1.9.0 or later is required to use this method**\r\n\r\nCancels your outstanding trade request to the specified user.\r\n\r\n### chatMessage(recipient, message[, type])\r\n- `recipient` - Either a `SteamID` object or a string which can parse into one for the recipient of your message\r\n- `message` - The chat message that you're sending to them\r\n- `type` - Optional. A value from `EChatEntryType`. Defaults to `ChatMsg`. This usually shouldn't be needed.\r\n\r\n**v1.9.0 or later is required to use this method**\r\n\r\nSends a chat message to a friend or a chat room.\r\n\r\n### chatTyping(recipient)\r\n- `recipient` - Either a `SteamID` object or a string which can parse into one\r\n\r\n**v1.9.0 or later is required to use this method**\r\n\r\nTells the `recipient` that you're typing a chat message.\r\n\r\n### getChatHistory(steamID[, callback])\r\n- `steamID` - Either a `SteamID` object or a string which can parse into one\r\n- `callback` - Optional. Called when the requested data is available\r\n\t- `success` - An `EResult` value\r\n\t- `messages` - An array of message objects, each of which has the following properties:\r\n\t\t- `steamID` - The SteamID of the user who sent the message, either us or them (as a `SteamID` object)\r\n\t\t- `timestamp` - A `Date` object for when the message was sent\r\n\t\t- `message` - The message text\r\n\t\t- `unread` - `true` if this was a new offline message, `false` if it's just history\r\n\r\n**v1.9.0 or later is required to use this method**\r\n\r\nRequests our chat history with a user. The results will arrive either in the callback or in the [`chatHistory`](#chathistory) event.\r\n\r\n### joinChat(steamID[, callback])\r\n- `steamID` - The SteamID of the chat to join (as a `SteamID` object or a string which can parse into one)\r\n- `callback` - Optional. Called when we either join or fail to join.\r\n\t- `result` - A value from `EResult`\r\n\r\n**v1.9.0 or later is required to use this method**\r\n\r\nJoins a chat room. To join a group chat, use the group's SteamID.\r\n\r\n### leaveChat(steamID)\r\n- `steamID` - The SteamID of the chat room to leave (as a `SteamID` object or a string which can parse into one)\r\n\r\n**v1.9.0 or later is required to use this method**\r\n\r\nLeaves a chat room we're in.\r\n\r\n### setChatPrivate(steamID)\r\n- `steamID` - The SteamID of the chat room to lock (as a `SteamID` object or a string which can parse into one)\r\n\r\n**v1.9.0 or later is required to use this method**\r\n\r\nLocks a chat room so that only group members and invited users can join.\r\n\r\n### setChatPublic(steamID)\r\n- `steamID` - The SteamID of the chat room to unlock (as a `SteamID` object or a string which can parse into one)\r\n\r\n**v1.9.0 or later is required to use this method**\r\n\r\nUnlocks a chat room so anyone can join.\r\n\r\n### setChatOfficersOnly(steamID)\r\n- `steamID` - The SteamID of the chat room to set officers-only (as a `SteamID` object or a string which can parse into one)\r\n\r\n**v1.9.0 or later is required to use this method**\r\n\r\nSets a chat room so that only group officers can chat.\r\n\r\n### unsetChatOfficersOnly(steamID)\r\n- `steamID` - The SteamID of the chat room to unset officers-only (as a `SteamID` object or a string which can parse into one)\r\n\r\n**v1.9.0 or later is required to use this method**\r\n\r\nSets a chat room so that anyone can chat.\r\n\r\n### kickFromChat(chatID, userID)\r\n- `chatID` - The SteamID of the chat room to kick the user from (as a `SteamID` object or a string which can parse into one)\r\n- `userID` - The SteamID of the user to kick from the room (as a `SteamID` object or a string which can parse into one)\r\n\r\n**v1.9.0 or later is required to use this method**\r\n\r\nKicks a user from a chat room.\r\n\r\n### banFromChat(chatID, userID)\r\n- `chatID` - The SteamID of the chat room to ban the user from (as a `SteamID` object or a string which can parse into one)\r\n- `userID` - The SteamID of the user to ban from the room (as a `SteamID` object or a string which can parse into one)\r\n\r\n**v1.9.0 or later is required to use this method**\r\n\r\nBans a user from a chat room.\r\n\r\n### unbanFromChat(chatID, userID)\r\n- `chatID` - The SteamID of the chat room to unban the user from (as a `SteamID` object or a string which can parse into one)\r\n- `userID` - The SteamID of the user to unban from the room (as a `SteamID` object or a string which can parse into one)\r\n\r\n**v1.9.0 or later is required to use this method**\r\n\r\nUnbans a banned user from a chat room.\r\n\r\n### inviteToChat(chatID, userID)\r\n- `chatID` - The SteamID of the chat room to invite to (as a `SteamID` object or a string which can parse into one)\r\n- `userID` - The SteamID of the user to invite to the room (as a `SteamID` object or a string which can parse into one)\r\n\r\n**v1.9.0 or later is required to use this method**\r\n\r\nInvites a user to a chat room.\r\n\r\n### createChatRoom([convertUserID, ][inviteUserID, ][callback])\r\n- `convertUserID` - If the user with the SteamID passed here has a chat window open with us, their window will be converted to the new chat room and they'll join it automatically. If they don't have a window open, they'll get an invite.\r\n- `inviteUserID` - If specified, the user with the SteamID passed here will get invited to the new room automatically.\r\n- `callback` - Optional. Called when the chat is created or a failure occurs.\r\n\t- `result` - A value from `EResult`\r\n\t- `chatID` - If successful, the SteamID of the newly-created room, as a `SteamID` object\r\n\r\n**v1.9.0 or later is required to use this method**\r\n\r\nCreates a new multi-user chat room.\r\n\r\n### redeemKey(key[, callback])\r\n- `key` - Steam formatted game key\r\n- `callback` - Optional. Called when request completes\r\n\t- `result` - An `EResult` value\r\n\t- `details` - A `SteamUser.EPurchaseResult` value\r\n\t- `packages` - An object whose keys are packageIDs and values are package names\r\n\r\nRedeems game code on your account\r\n\r\n# Events\r\n\r\n## ID Events\r\n\r\nEvents marked as **ID events** are special. They all have a `SteamID` object as their first parameter. In addition to the event itself firing, a second event comprised of `eventName + \"#\" + steamID.getSteamID64()` is fired.\r\n\r\nFor example:\r\n\r\n```js\r\n// This will fire when we receive a chat message from ANY friend\r\nuser.on('friendMessage', function(steamID, message) {\r\n\tconsole.log(\"Friend message from \" + steamID.getSteam3RenderedID() + \": \" + message);\r\n}\r\n\r\n// This will fire when we receive a chat message from [U:1:46143802] / 76561198006409530 ONLY\r\nuser.on('friendMessage#76561198006409530', function(steamID, message) {\r\n\tconsole.log(\"Friend message from \" + steamID.getSteam3RenderedID() + \": \" + message);\r\n}\r\n```\r\n\r\n### loggedOn\r\n- `details` - An object containing various details about your account (see [`CMsgClientLogonResponse`](https://github.com/SteamRE/SteamKit/blob/SteamKit_1.6.3/Resources/Protobufs/steamclient/steammessages_clientserver.proto#L93-L116))\r\n\r\nEmitted when you're successfully logged into Steam.\r\n\r\n### steamGuard\r\n- `domain` - If an email code is needed, the domain name of the address where the email was sent. `null` if an app code is needed.\r\n- `callback` - Should be called when the code is available.\r\n\t- `code` - The Steam Guard auth code\r\n- `lastCodeWrong` - `true` if you're using 2FA and the last code you provided was wrong, `false` otherwise\r\n\r\nIf the `promptSteamGuardCode` option is disabled, this event will be emitted when Steam requests a Steam Guard code from us. You should collect the code from the user somehow and then call the `callback` with the code as the sole argument.\r\n\r\nExample:\r\n\r\n```js\r\nuser.on('steamGuard', function(domain, callback) {\r\n\tconsole.log(\"Steam Guard code needed from email ending in \" + domain);\r\n\tvar code = getCodeSomehow();\r\n\tcallback(code);\r\n});\r\n```\r\n\r\n### error\r\n- `err` - An `Error` object\r\n\r\nEmitted when an error occurs during logon. Also emitted if we're disconnected and `autoRelogin` is either disabled, or it's a fatal disconnect.\r\n\r\nIf this event isn't handled, the program will crash.\r\n\r\nThe `SteamUser` object's `steamID` property will still be defined when this is emitted. The `Error` object will have an `eresult` parameter which is a value from the [`EResult`](https://github.com/SteamRE/SteamKit/blob/SteamKit_1.6.3/Resources/SteamLanguage/eresult.steamd) enum.\r\n\r\n### disconnected\r\n- `eresult` - A value from the `Steam.EResult` enum\r\n\r\nEmitted when we're disconnected from Steam for a non-fatal reason and `autoRelogin` is enabled. `SteamUser` will\r\ncontinually retry connection and will either emit `loggedOn` when logged back on, or `error` if a fatal logon error is\r\nexperienced.\r\n\r\nAlso emitted in response to a logOff() call.\r\n\r\nThe `SteamUser` object's `steamID` property will still be defined when this is emitted.\r\n\r\n### sentry\r\n- `sentry` - A Buffer containing your new sentry file\r\n\r\nEmitted when Steam sends us a new sentry file. By default, `SteamUser` will automatically save and reuse this sentry file for subsequent logins, but if you wish you may handle it yourself (see [`setSentry`](#setsentrysentry)).\r\n\r\n### webSession\r\n- `sessionID` - The value of the `sessionid` cookie\r\n- `cookies` - An array of cookies, as `name=value` strings\r\n\r\nEmitted when a steamcommunity.com web session is successfully negotiated. This will automatically be emitted on logon and in response to [`webLogOn`](#weblogon) calls.\r\n\r\nSome libraries require you to provide your `sessionID`, others don't. If your library doesn't, you can safely ignore it.\r\n\r\n### loginKey\r\n- `key` - Your login key\r\n\r\nIf you enabled `rememberPassword` in [`logOn`](#logondetails), this will be emitted when Steam sends us a new login key. This key can be passed to [`logOn`](#logondetails) as `loginKey` in lieu of a password on subsequent logins.\r\n\r\nAt this time, I'm not sure if login keys expire, so to be safe you should record this somewhere (in a database, in a file, etc) and overwrite it every time the event is emitted.\r\n\r\n### newItems\r\n- `count` - How many new items you have (can be 0)\r\n\r\nEmitted when Steam sends a notification of new items. You can reset the count to 0 by loading your inventory page (https://steamcommunity.com/my/inventory) while logged in.\r\n\r\n### newComments\r\n- `count` - How many total new comments you have (can be 0)\r\n- `myItems` - How many of the total comments are on your content (workshop items, screenshots, your profile, etc.)\r\n- `discussions` - How many of the total comments are posts in subscribed discussion threads\r\n\r\nEmitted when Steam sends a notification of new comments.\r\n\r\n### tradeOffers\r\n- `count` - How many active received trade offers you have (can be 0)\r\n\r\nEmitted when Steam sends a notification of new trade offers.\r\n\r\n### offlineMessages\r\n- `count` - How many unread offline chat messages you have\r\n- `friends` - An array of SteamID strings for the users who have sent you unread offline chat messages\r\n\r\nEmitted when Steam sends a notification of unread offline chat messages. This will always be emitted after logon, even if you have no messages.\r\n\r\n### emailInfo\r\n- `address` - Your account's email address\r\n- `validated` - A boolean value for whether or not your email address is validated\r\n\r\nEmitted on logon and when email info changes. The [`emailInfo`](#emailinfo) property will be updated after this event is emitted.\r\n\r\n### accountLimitations\r\n- `limited` - `true` if your account is [limited](https://support.steampowered.com/kb_article.php?ref=3330-IAGK-7663), `false` if not\r\n- `communityBanned` - `true` if your account is banned from Steam Community, `false` if not\r\n- `locked` - `true` if your account is [locked](https://support.steampowered.com/kb_article.php?ref=6416-FHVM-3982), `false` if not (accounts can also be locked by Support)\r\n- `canInviteFriends` - `true` if your account can invite friends, `false` if not\r\n\r\nEmitted on logon and probably when limitations change. The [`limitations`](#limitations) property will be updated after this event is emitted.\r\n\r\n### vacBans\r\n- `numBans` - How many bans your account has\r\n- `appids` - The AppIDs from which you're banned. Since each ban affects a range of AppIDs, some of the AppIDs in this array may not exist.\r\n\r\nEmitted on logon and probably when you get banned/unbanned. The [`vac`](#vac) property will be updated after this event is emitted.\r\n\r\n### wallet\r\n- `hasWallet` - `true` if your account has a Steam Wallet, `false` if not\r\n- `currency` - The currency ID of your account's wallet (the enum of currencies is available as `SteamUser.ECurrencyCode`)\r\n- `balance` - Your account's current wallet balance\r\n\r\nEmitted on logon and when wallet balance changes. The [`wallet`](#wallet) property will be updated after this event is emitted.\r\n\r\n### licenses\r\n- `licenses` - An array of licenses\r\n\r\nContains the license data for the packages which your Steam account owns. To see license object structure, see\r\n[`CMsgClientLicenseList.License`](https://github.com/SteamRE/SteamKit/blob/SteamKit_1.6.3/Resources/Protobufs/steamclient/steammessages_clientserver.proto#L307-L320).\r\n\r\nEmitted on logon and when licenses change. The [`licenses`](#licenses) property will be updated after this event is\r\nemitted.\r\n\r\nThis isn't emitted for anonymous accounts. However, all anonymous user accounts have a license for package 17906\r\nautomatically.\r\n\r\n### appOwnershipCached\r\n\r\n**v3.3.0 or later is required to use this event**\r\n\r\nEmitted once we have all data required in order to determine app ownership. You can now safely call `getOwnedApps`,\r\n`ownsApp`, `getOwnedDepots`, and `ownsDepot`.\r\n\r\nThis is only emitted if `enablePicsCache` is `true`.\r\n\r\n### changelist\r\n- `changenumber` - The changenumber of the changelist we just received\r\n- `apps` - An array of AppIDs which changed since our last received changelist\r\n- `packages` - An array of PackageIDs which changed since our last received changelist\r\n\r\n**v3.3.0 or later is required to use this method**\r\n\r\nEmitted when we receive a new changelist from Steam. The `picsCache` property is updated after this is emitted, so you\r\ncan get the previous changenumber via `picsCache.changenumber`.\r\n\r\nThis is only emitted if `enablePicsCache` is `true` and `changelistUpdateInterval` is nonzero.\r\n\r\n### appUpdate\r\n- `appid` - The AppID of the app which just changed\r\n- `data` - An object identical to that received from `getProductInfo`\r\n\r\n**v3.3.0 or later is required to use this method**\r\n\r\nEmitted when an app that was already in our cache updates. The `picsCache` property is updated after this is emitted, so\r\nyou can get the previous app data via `picsCache.apps[appid]`.\r\n\r\nThis is only emitted if `enablePicsCache` is `true` and `changelistUpdateInterval` is nonzero.\r\n\r\n### packageUpdate\r\n- `packageid` - The PackageID of the package which just changed\r\n- `data` - An object identical to that received from `getProductInfo`\r\n\r\n**v3.3.0 or later is required to use this method**\r\n\r\nEmitted when a package that was already in our cache updates. The `picsCache` property is updated after this is emitted,\r\nso you can get the previous package data via `picsCache.packages[packageid]`.\r\n\r\nThis is only emitted if `enablePicsCache` is `true` and `changelistUpdateInterval` is nonzero.\r\n\r\n### tradeRequest\r\n- `steamID` - The SteamID of the user who sent the request, as a `SteamID` object\r\n- `respond` - A function which you should call to either accept or decline the request\r\n\t- `accept` - `true` to accept the request, `false` to decline it\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when someone sends us a trade request. Example usage:\r\n\r\n```js\r\nuser.on('tradeRequest', function(steamID, respond) {\r\n\tconsole.log(\"Incoming trade request from \" + name + \" \" + steamID.getSteam3RenderedID() + \", accepting\");\r\n\trespond(true);\r\n}\r\n```\r\n\r\n### tradeResponse\r\n- `steamID` - The SteamID of the other user, as a `SteamID` object\r\n- `response` - A value from the `EEconTradeResponse` enum\r\n- `restrictions` - An object containing the following properties (of which any or all could be undefined)\r\n\t- `steamguardRequiredDays`\r\n\t- `newDeviceCooldownDays`\r\n\t- `defaultPasswordResetProbationDays`\r\n\t- `passwordResetProbationDays`\r\n\t- `defaultEmailChangeProbationDays`\r\n\t- `emailChangeProbationDays`\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when someone responds to our trade request. Also emitted with response `EEconTradeResponse.Cancel` when someone cancels their outstanding trade request to us.\r\n\r\n### tradeStarted\r\n- `steamID` - The SteamID of your trade partner, as a `SteamID` object\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when a new trade session has started (either as a result of someone accepting a Steam trade request, an in-game (TF2) trade request, or something else).\r\n\r\nThe trade is now available at http://steamcommunity.com/trade/[SteamID], and can be automated with [`node-steam-trade`](https://github.com/seishun/node-steam-trade).\r\n\r\n### user\r\n- `sid` - A `SteamID` object for the user whose data we just received\r\n- `user` - An object containing the user's persona data\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when Steam sends us persona information about a user. The [`users`](#users) property isn't yet updated when this is emitted, so you can compare to see what changed.\r\n\r\n### group\r\n- `sid` - A `SteamID` object for the group whose data we just received\r\n- `group` - An object containing the group's data\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when Steam sends us information about a Steam group. The [`groups`](#groups) property isn't yet updated when this is emitted, so you can compare to see what changed.\r\n\r\n### groupEvent\r\n- `sid` - A `SteamID` object for the group who just posted/started an event\r\n- `headline` - The name of the event\r\n- `date` - A `Date` object for the event's start time\r\n- `gid` - The event's GID (link to the event page at https://steamcommunity.com/gid/<SteamID>/event/<GID>)\r\n- `gameID` - The AppID of the game which this event is associated with\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when a group schedules a new event, or a new event starts.\r\n\r\n### groupAnnouncement\r\n- `sid` - A `SteamID` object for the group who just posted an announcement\r\n- `headline` - The title of the announcement\r\n- `gid` - The announcement's GID (link to the announcement page at https://steamcommunity.com/gid/<SteamID>/announcements/detail/<GID>)\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when a group posts a new announcement.\r\n\r\n### friendRelationship\r\n- `sid` - A `SteamID` object for the user whose relationship with us just changed\r\n- `relationship` - A value from `EFriendRelationship`\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when our relationship with a particular user changes. For example, `EFriendRelationship.RequestRecipient` means that we got invited as a friend, `EFriendRelationship.None` means that we got unfriended.\r\n\r\nThe [`myFriends`](#myfriends) property isn't yet updated when this is emitted, so you can compare to the old value to see what changed.\r\n\r\n### groupRelationship\r\n- `sid` - A `SteamID` object for the group whose relationship with us just changed\r\n- `relationship` - A value from `EFriendRelationship`\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when our relationship with a particular Steam group changes.\r\n\r\nThe [`myGroups`](#mygroups) property isn't yet updated when this is emitted, so you can compare to the old value to see what changed.\r\n\r\n### friendsList\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\nEmitted when our friends list is downloaded from Steam after logon.\r\n\r\n### groupList\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\nEmitted when our group list is downloaded from Steam after logon.\r\n\r\n### friendsGroupList\r\n- `groups` - An object whose structure is identical to the [`myFriendGroups`](#myfriendgroups) property\r\n\r\n**v1.10.0 or later is required to use this event**\r\n\r\nEmitted when our friends group list is downloaded from Steam after logon (in the official client, these are called *tags*).\r\n\r\nThe `myFriendGroups` property will be updated **after** this event is emitted, so you can compare `groups` with the property to see what changed.\r\n\r\n### friendOrChatMessage\r\n- `senderID` - The message sender, as a `SteamID` object\r\n- `message` - The message text\r\n- `room` - The room to which the message was sent. This is the user's `SteamID` if it was a friend message\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when we receive either a friend message or a chat room message.\r\n\r\n### friendMessage\r\n- `senderID` - The message sender, as a `SteamID` object\r\n- `message` - The message text\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when we receive a direct friend message (that is, not through a chat room).\r\n\r\n### friendTyping\r\n- `senderID` - The `SteamID` of the friend who's typing\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when Steam notifies us that one of our friends is typing a message to us.\r\n\r\n### friendMessageEcho\r\n- `recipientID` - The `SteamID` of the user who rececived this message\r\n- `message` - The message text\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when Steam echos us a message that we sent to a friend on another login.\r\n\r\n### friendTypingEcho\r\n- `recipientID` - The `SteamID` of the user who we're typing to\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when Steam echos us a notification that we're typing to a friend on another login.\r\n\r\n### chatMessage\r\n- `room` - The `SteamID` of the chat room\r\n- `chatter` - The `SteamID` of the message sender\r\n- `message` - The message text\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when we receive a chat message from a chat room. This is a special ID event. Any of the following are acceptable:\r\n- `chatMessage`\r\n- `chatMessage#roomID`\r\n- `chatMessage#senderID`\r\n- `chatMessage#roomID#senderID`\r\n\r\n### chatHistory\r\n- `steamID` - The `SteamID` of the user with whom we got chat history\r\n- `success` - An `EResult` value\r\n- `messages` - An array of message objects\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nWith the exception of the `steamID` argument, this is identical to the callback of `getChatHistory`.\r\n\r\n### chatInvite\r\n- `inviterID` - The `SteamID` of the user who invited us\r\n- `chatID` - The `SteamID` of the chat that we were invited to\r\n- `chatName` - The name of the chat we were invited to. Empty if it's a multi-user chat and not a group chat.\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when we're invited to join a chat room. This is a special ID event. Any of the following are acceptable:\r\n- `chatInvite`\r\n- `chatInvite#inviterID`\r\n- `chatInvite#chatID`\r\n- `chatInvite#inviterID#chatID`\r\n\r\n### chatCreated\r\n- `friendID` - The `SteamID` of the friend with whom we were creating this room\r\n- `eresult` - An `EResult` value\r\n- `chatID` - The `SteamID` of the newly-created chat, if successful\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nWith the exception of the `friendID` argument, this event is identical to the callback of `createChatRoom`.\r\n\r\n### chatEnter\r\n- `chatID` - The `SteamID` of the chat room that we either entered or failed to enter\r\n- `response` - A value from `EChatRoomEnterResponse`\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nWith the exception of the `chatID` argument, this event is identical to the callback of `joinChat`.\r\n\r\n### chatLeft\r\n- `chatID` - The `SteamID` of the chat room that we left\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when we leave a chat room for any reason (we left, kicked, banned, etc).\r\n\r\n### chatUserJoined\r\n- `chatID` - The `SteamID` of the chat room that the user joined\r\n- `userID` - The `SteamID` of the user who joined\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when a user joins a chat room we're in.\r\n\r\n### chatUserLeft\r\n- `chatID` - The `SteamID` of the chat room that the user left\r\n- `userID` - The `SteamID` of the user who left\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when a user leaves a chat room we're in.\r\n\r\n### chatUserDisconnected\r\n- `chatID` - The `SteamID` of the chat room that the user disconnected from\r\n- `userID` - The `SteamID` of the user who disconnected\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when a user in a chat room we're in disconnects from Steam.\r\n\r\n### chatUserKicked\r\n- `chatID` - The `SteamID` of the chat room that the user was kicked from\r\n- `userID` - The `SteamID` of the user who was kicked\r\n- `actor` - The `SteamID` of the user who did the kicking\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when a user is kicked from a chat room we're in.\r\n\r\n### chatUserBanned\r\n- `chatID` - The `SteamID` of the chat room that the user was banned from\r\n- `userID` - The `SteamID` of the user who was banned\r\n- `actor` - The `SteamID` of the user who did the banning\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when a user is banned from a chat room we're in.\r\n\r\n### chatUserSpeaking\r\n- `chatID` - The `SteamID` of the chat room that the user is speaking in\r\n- `userID` - The `SteamID` of the user who is speaking\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when a user in a chat room we're in starts speaking over voice chat.\r\n\r\n### chatUserDoneSpeaking\r\n- `chatID` - The `SteamID` of the chat room that the user is done speaking in\r\n- `userID` - The `SteamID` of the user who is done speaking\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when a user in a chat room we're in stops speaking over voice chat.\r\n\r\n### chatSetPublic\r\n- `chatID` - The `SteamID` of the chat room that was unlocked\r\n- `actor` - The `SteamID` of the user who unlocked it\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when a chat room we're in is unlocked so that anyone can join.\r\n\r\n### chatSetPrivate\r\n- `chatID` - The `SteamID` of the chat room that was locked\r\n- `actor` - The `SteamID` of the user who locked it\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when a chat room we're in is locked so that only group members can join without an invite.\r\n\r\n### chatSetOfficersOnly\r\n- `chatID` - The `SteamID` of the chat room that was set officers-only\r\n- `actor` - The `SteamID` of the user who set it officers-only\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when a chat room we're in is set so that only group officers can chat.\r\n\r\n### chatSetPrivate\r\n- `chatID` - The `SteamID` of the chat room that was unset officers-only\r\n- `actor` - The `SteamID` of the user who unset it officers-only\r\n\r\n**v1.9.0 or later is required to use this event**\r\n\r\n*This is an [ID event](#id-events).*\r\n\r\nEmitted when a chat room we're in is set so that everyone can chat.\r\n",
  "readmeFilename": "README.md"
}
