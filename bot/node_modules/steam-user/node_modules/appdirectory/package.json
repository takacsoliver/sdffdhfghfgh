{
  "name": "appdirectory",
  "version": "0.1.0",
  "description": "A cross-platform utility to find the best directory to put data and config files.",
  "main": "lib/appdirectory.js",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/MrJohz/appdirectory.git"
  },
  "scripts": {
    "test": "make test"
  },
  "keywords": [
    "cross-platform",
    "utility",
    "appdata",
    "config",
    "directory"
  ],
  "author": {
    "name": "Johz"
  },
  "license": "MIT",
  "devDependencies": {
    "mocha": "~1.17.1",
    "should": "~3.1.3",
    "coveralls": "~2.8.0"
  },
  "readme": "[![Build Status](https://travis-ci.org/MrJohz/appdirectory.png?branch=master)](https://travis-ci.org/MrJohz/appdirectory)\n[![Coverage Status](https://coveralls.io/repos/MrJohz/appdirectory/badge.png)](https://coveralls.io/r/MrJohz/appdirectory)\n\n# AppDirectory\n\nAppDirectory is a port of Python's [appdirs][] module.  It can be used as a small cross-platform tool to find the correct directory for an application to use for persistence.  It isn't perfect, but it might be useful.\n\n### Usage\nAppDirectory offers one export: the `AppDirectory` constructor:\n\n```\nvar AppDirectory = require('appdirectory')\nvar dirs = new AppDirectory('mycoolappname')\n```\n\n`AppDirectory` can be instantiated either with a single string (the application's name) or an object containing more information about the application.\n\n```\nvar dirs = new AppDirectory({\n    appName: \"mycoolapp\", // the app's name, kinda self-explanatory\n    appAuthor: \"Superman\", // The author's name, or (more likely) the name of the company/organisation producing this software.\n                        Â   // Only used on Windows, if omitted will default to appName.\n    appVersion: \"v6000\", // The version, will be appended to certain dirs to allow for distinction between versions.\n                         // If it isn't present, no version parameter will appear in the paths\n    useRoaming: true, // Should AppDirectory use Window's roaming directories?  (Defaults to false)\n    platform: \"darwin\" // You should almost never need to use this, it will be automatically determined\n})\n```\n\nNow to get some actual paths.\n\n```\ndirs.userData() // e.g. /home/awesomeuser/Library/Application Support/mycoolapp on Macs\ndirs.userConfig() // e.g. /home/awesomeuser/.config/mycoolapp on linux etc.\ndirs.userCache() // e.g. C:\\Users\\awesomeuser\\AppData\\Local\\mycoolapp\\mycoolapp\\Cache on Windows 7 (and Vista, I believe)\ndirs.userLogs() // e.g. /home/awesomeuser/.cache/mycoolapp/log\n```\n\nThat's pretty much all there is to it.\n\n\n### Todo\n- Fix site* functions\n- Test all user* functions\n\n### Known Limitations\n> Note: All this limitations have been fixed by virtue of removing the site* functions.  The aim is to add them back in, at which point they will still exist, as one's a design decision, and the other's unfixable as far as I can tell.  However, at this point, there are no known limitations to AppDirectory!  (Feel free to tell me about new limitations by filing an issue.)\n- ~~On Windows Vista, the site-config and site-data directories are hidden system directories, which may cause issues.  I don't have a copy of Vista to hand to play around with how well this works, though, so YMMV.~~\n- ~~On unix-likes (including those with XDG-compliance), requesting the site-config and site-data directories will return just one directory, even in cases where the XDG* variables contain more than one individual path.  (Specifically, it will be the first path AppDirectory finds.)~~\n\n[appdirs]: <https://pypi.python.org/pypi/appdirs/>",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/MrJohz/appdirectory/issues"
  },
  "homepage": "https://github.com/MrJohz/appdirectory",
  "_id": "appdirectory@0.1.0",
  "_from": "appdirectory@^0.1.0"
}
