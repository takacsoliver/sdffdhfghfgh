{
  "name": "steam-client",
  "version": "1.1.1",
  "description": "SteamClient from node-steam with proper versioning and more features",
  "keywords": [
    "steam",
    "steam client"
  ],
  "homepage": "https://github.com/DoctorMcKay/node-steam-client",
  "bugs": {
    "url": "https://github.com/DoctorMcKay/node-steam-client/issues"
  },
  "license": "MIT",
  "author": {
    "name": "Alexander Corn",
    "email": "mckay@doctormckay.com",
    "url": "https://www.doctormckay.com"
  },
  "contributors": [
    {
      "name": "Nicholas",
      "email": "vvnicholas@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/DoctorMcKay/node-steam-client.git"
  },
  "dependencies": {
    "adm-zip": "^0.4.0",
    "buffer-crc32": "^0.2.0",
    "bytebuffer": "^5.0.0",
    "steam-crypto": "^0.0.1",
    "steam-resources": "github:seishun/node-steam-resources#v1.0.0"
  },
  "engines": {
    "node": ">=4.1.1"
  },
  "scripts": {
    "prepublish": "node scripts/prepublish.js"
  },
  "readme": "# Steam for Node.js\r\n\r\n[![npm version](https://img.shields.io/npm/v/steam-client.svg)](https://npmjs.com/package/steam-client)\r\n[![npm downloads](https://img.shields.io/npm/dm/steam-client.svg)](https://npmjs.com/package/steam-client)\r\n[![dependencies](https://img.shields.io/david/DoctorMcKay/node-steam-client.svg)](https://david-dm.org/DoctorMcKay/node-steam-client)\r\n[![license](https://img.shields.io/npm/l/steam-client.svg)](https://github.com/DoctorMcKay/node-steam-client/blob/master/LICENSE)\r\n[![paypal](https://img.shields.io/badge/paypal-donate-yellow.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=N36YVAT42CZ4G&item_name=node%2dsteam%2dclient&currency_code=USD)\r\n\r\nThis is a fork of [node-steam](https://www.npmjs.com/package/steam)'s SteamClient. Essentially it's node-steam without\r\nthe handler modules and with some more features. It should be compatible with all node-steam handler modules.\r\n\r\nThis exists because of how painfully slow it is to get new things implemented into node-steam, and also because of\r\nincompatibilities that can potentially arise between node-steam and third-party handler modules.\r\n\r\nProtocol version bumps will always be major module releases. You're highly recommended to pin the major version in your\r\ndependencies (e.g. `\"steam-client\": \"^1.0.0\"`).\r\n\r\n**Requires Node.js v4.1.1 or later.**\r\n\r\n# Installation\r\n\r\n    $ npm install steam-client\r\n\r\n# Usage\r\n\r\nFirst, `require` this module.\r\n```js\r\nvar Steam = require('steam');\r\n```\r\n`Steam` is now a namespace object containing:\r\n* [CMClient class](#cmclient)\r\n* [`servers` property](#servers)\r\n* [Enums](#enums)\r\n\r\nThen you'll want to create an instance of CMClient and any handlers you need (externally), call\r\n[SteamClient#connect](#connect) and assign event listeners. Some handlers, such as\r\n[`node-steam-user`](https://www.npmjs.com/package/steam-user) do this automatically for you.\r\n\r\n```js\r\nvar steamClient = new Steam.CMClient();\r\nsteamClient.connect();\r\nsteamClient.on('connected', function() {\r\n    steamClient.logOn({\r\n        \"account_name\": \"username\",\r\n        \"password\": \"password\"\r\n    });\r\n});\r\n\r\nsteamClient.on('logOnResponse', function(details) { /* ... */});\r\n```\r\n\r\n# Constructor\r\n\r\nThe constructor takes one argument: the protocol to use to connect to Steam. This should be a value from\r\n[`EConnectionProtocol`](https://github.com/DoctorMcKay/node-steam-client/blob/master/index.js#L25).\r\nDefault is TCP. **UDP support is experimental.** There are some pros and cons to each:\r\n\r\n- TCP\r\n    - **Pro:** Operating system manages the connection, so you will automatically disconnect if your app crashes or is killed\r\n    - **Con:** Less fine control over the connection. It's up to the OS to detect poor network conditions and kill the connection\r\n- UDP\r\n    - **Pro:** Finer control over the connection. Able to tear down a broken connection faster in cases where the OS wouldn't detect it\r\n    - **Pro:** Gives you access to the server load of the CM you connected to\r\n    - **Con:** If your app crashes or is killed without properly logging off or disconnecting, your session will remain active for a minute while Steam waits for it to timeout\r\n    - **Con:** Currently support for UDP connections in `CMClient` is experimental\r\n\r\nNote that UDP connections use Valve-brand UDP, which is essentially TCP over UDP. Consequently, network unreliability\r\nis not a concern when using UDP.\r\n\r\nExample:\r\n\r\n```js\r\nvar Steam = require('steam-client');\r\nvar client = new Steam.CMClient(Steam.EConnectionProtocol.TCP);\r\n```\r\n\r\n# Servers\r\n\r\n`Steam.servers` contains the list of CM servers that `CMClient` will attempt to connect to. The bootstrapped list is not\r\nalways up-to-date and might contain dead servers. To avoid timeouts, replace it with your own list before logging in if\r\nyou have one (see ['servers' event](#servers-1)).\r\n\r\n# SteamID\r\n\r\nSince JavaScript's Number type does not have enough precision to store 64-bit integers, SteamIDs are represented as decimal strings. (Just wrap the number in quotes)\r\n\r\n# Enums\r\n\r\nWhenever a method accepts (or an event provides) an `ESomething`, it's a Number that represents some enum value. See\r\n[enums.steamd](https://github.com/SteamRE/SteamKit/blob/master/Resources/SteamLanguage/enums.steamd) and\r\n[eresult.steamd](https://github.com/SteamRE/SteamKit/blob/master/Resources/SteamLanguage/eresult.steamd) for the whole\r\nlist of them. For each enum, there is an equivalently named property on `Steam`. The property is an object; for each of\r\nthe enum's members, there is an equivalently named property on the object with an equivalent value.\r\n\r\nNote that you can't easily get the string value from the number, but you probably don't need to. You can still use them\r\nin conditions (e.g. `if (type == Steam.EChatEntryType.Emote) ...`) or switch statements.\r\n\r\n# Protobufs\r\n\r\nWhenever a method accepts (or an event provides) a `CMsgSomething`, it's an object that represents a protobuf message.\r\nIt has an equivalently named property for each set field in the specified message with the type as follows:\r\n\r\n* `(u)int32` and `fixed32` fields: Number\r\n* `uint64`, `fixed64` and `string` fields: String\r\n* `bytes` fields: Buffer objects\r\n* `bool` fields: Boolean\r\n\r\nSee the [node-steam wiki](https://github.com/seishun/node-steam/wiki/Protobufs) for descriptions of protobuf fields.\r\n\r\n# Handlers\r\n\r\nMost of the API is provided by handler classes that internally send and receive low-level client messages using\r\n['message'/send](#messagesend).\r\n\r\nThis module has no handlers built-in. You may use handlers from [`node-steam`](https://www.npmjs.com/package/steam), or\r\nyou may alternatively use standalone handlers (such as [`node-steam-user`](https://www.npmjs.com/package/steam-user)).\r\n\r\n# CMClient\r\n\r\n## Properties\r\n\r\n### connected\r\n\r\nA boolean that indicates whether you are currently connected and the encryption handshake is complete.\r\n['connected'](#connected-1) is emitted when it changes to `true`, and ['error'](#error) is emitted when it changes to\r\n`false` unless you called [disconnect](#disconnect). Sending any client messages is only allowed while this is `true`.\r\n\r\n### loggedOn\r\n\r\nA boolean that indicates whether you are currently logged on. Calling any handler methods except for methods to log on\r\nis only allowed while logged on.\r\n\r\n### steamID\r\n\r\nYour own SteamID while logged on, otherwise unspecified. Must be set to a valid initial value before sending a logon\r\nmessage ([logOn](#logondetails) does that for you).\r\n\r\n## Methods\r\n\r\n### bind([localAddress][, localPort])\r\n- `localAddress` - The local IP address you want to use for the outgoing connection\r\n- `localPort` - The local port you want to use for the outgoing connection\r\n\r\nOverride the address and/or port that will be used for the outgoing connection. Takes effect the next time you connect.\r\n\r\n### connect([server][, autoRetry])\r\n- `server` - If you want to connect to a specific CM server, provide an object here containing `host` and `port` properties. Default is a random value from the [`servers`](#servers) property.\r\n- `autoRetry` - `true` if you want to automatically retry connection until successful, or `false` if you want an `error` event if connection fails. Default `true`.\r\n\r\nConnects to Steam. It will keep trying to reconnect (provided `autoRetry` is not `false`) until encryption handshake is\r\ncomplete (see ['connected'](#connected-1)), unless you cancel it with [disconnect](#disconnect).\r\n\r\nYou can call this method at any time. If you are already connected, disconnects you first. If there is an ongoing\r\nconnection attempt, cancels it.\r\n\r\n### disconnect()\r\n\r\nImmediately terminates the connection and prevents any events (including ['error'](#error)) from being emitted until\r\nyou [connect](#connect) again. If you are already disconnected, does nothing. If there is an ongoing connection\r\nattempt, cancels it.\r\n\r\n### logOn(details)\r\n- `details` - An object containing your logon parameters\r\n\r\nSend a logon message to the CM. You must be connected first. You will receive the response in the\r\n[`logOnResponse`](#logonresponse) event.\r\n\r\n### send(header, body, callback)\r\n- `header` - An object containing the message header. It has the following properties:\r\n    - `msg` - A value from `EMsg`\r\n    - `proto` - A [`CMsgProtoBufHeader`](https://github.com/SteamRE/SteamKit/blob/master/Resources/Protobufs/steamclient/steammessages_base.proto) object if this message is protobuf-backed, otherwise `header.proto` is falsy. The following fields are reserved for internal use and shall be ignored: `steamid`, `client_sessionid`, `jobid_source`, `jobid_target`. (Note: pass an empty object if you don't need to set any fields)\r\n- `body` - A `Buffer` or `ByteBuffer` containing the rest of the message\r\n- `callback` (optional) - if not falsy, then this message is a request, and `callback` shall be called with any response to it instead of 'message'/send. `callback` has the same arguments as 'message'/send.\r\n\r\n## Events\r\n\r\n### error\r\n- `err` - An `Error` object. May contain an `eresult` property.\r\n\r\nConnection closed by the server. Only emitted if the encryption handshake is complete, otherwise it will reconnect\r\nautomatically (unless you disabled `autoRetry`). [`loggedOn`](#loggedon) is now `false`.\r\n\r\n### connected\r\n- `serverLoad` - The load value of the CM server you're connected to. Only available if you're connecting using UDP. It's unclear at this time what scale this value uses.\r\n\r\nEncryption handshake complete. From now on, it's your responsibility to handle disconnections and reconnect\r\n(see [`error`](#error)). You'll likely want to [log on](#logondetails) now.\r\n\r\n### logOnResponse\r\n- `response` - An object with the properties in [`CMsgClientLogonResponse`](https://github.com/SteamRE/SteamKit/blob/master/Resources/Protobufs/steamclient/steammessages_clientserver.proto)\r\n\r\nLogon response received. If `eresult` is `EResult.OK`, [`loggedOn`](#loggedon) is now `true`.\r\n\r\n### servers\r\n- `servers` - An array containing the up-to-date server list\r\n\r\nCMClient will use this new list when reconnecting, but it will be lost when your application restarts. You might want\r\nto save it to a file or a database and assign it to [`Steam.servers`](#servers) before logging in next time.\r\n\r\nNote that `Steam.servers` will be automatically updated *after* this event is emitted. This will be useful if you want\r\nto compare the old list with the new one for some reason - otherwise it shouldn't matter.\r\n\r\n### loggedOff\r\n- `eresult` - A value from `EResult`\r\n\r\nYou were logged off from Steam. [`loggedOn`](#loggedon) is now `false`.\r\n\r\n### message\r\n- `header` - An object containing the message header\r\n- `body` - A `Buffer` containing the rest of the message\r\n- `callback` - If set, then this message is a request and Steam expects a response back from you. To respond, call this callback instead of using `send()`.\r\n\r\n Emitted when you receive a message from the CM.\r\n",
  "readmeFilename": "README.md",
  "bundleDependencies": [
    "steam-resources"
  ],
  "_id": "steam-client@1.1.1",
  "_from": "steam-client@^1.0.1"
}
